# Gradle
# Build your Java projects and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/vsts/pipelines/languages/java

resources:
  containers:
  - container: wpilib2020
    image: wpilib/roborio-cross-ubuntu:2020-18.04

jobs:
 - job: Linux_Arm
   pool:
     vmImage: 'Ubuntu 16.04'
   container: wpilib2020

   steps:
    - task: Gradle@2
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        publishJUnitResults: false
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'build'
        options: '-PonlyAthena'
        # checkStyleRunAnalysis: true
        # pmdRunAnalysis: true

 - job: Linux
   pool:
     vmImage: 'Ubuntu 16.04'

   container: wpilib2020

   steps:
    - task: Gradle@2
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'build'
        options: '-PskipAthena'
        # checkStyleRunAnalysis: true
        # pmdRunAnalysis: true

#  - job: Styleguide
#    pool:
#      vmImage: 'Ubuntu 16.04'

#    steps:
#       - script: |
#           sudo apt-get update -y
#           sudo apt-get install clang-format-5.0 python3-setuptools -y
#           sudo pip3 install --upgrade pip
#           sudo pip3 install wpiformat
#           git checkout -b master
#         displayName: 'Install Dependencies'
#       - script: |
#           wpiformat -y 2020 -clang 5.0
#         displayName: 'Run WPIFormat'
#         failOnStderr: true
#       - script: |
#           git --no-pager diff --exit-code HEAD  # Ensure formatter made no changes
#         displayName: 'Check WPIFormat Output'
#         failOnStderr: true

 - job: Windows_64_Bit
   pool:
     vmImage: 'vs2017-win2016'
   steps:
    - powershell: |
        mkdir build
        $ProgressPreference = 'SilentlyContinue'
        wget "https://download.java.net/java/ga/jdk11/openjdk-11_windows-x64_bin.zip" -O "build\jdk.zip"
      displayName: 'Download JDK'
    - task: JavaToolInstaller@0
      inputs:
        jdkSourceOption: localDirectory
        jdkFile: 'build/jdk.zip'
        jdkDestinationDirectory: 'build/jdkinst'
        jdkArchitectureOption: x64
    - task: Gradle@2
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'build'
        # checkStyleRunAnalysis: true
        # pmdRunAnalysis: true

 - job: Mac
   pool:
     vmImage: 'xcode9-macos10.13'
   steps:
    - script: |
        mkdir build
        wget "https://download.java.net/java/ga/jdk11/openjdk-11_osx-x64_bin.tar.gz" -O "build/jdk.tar.gz"
        sudo tar xvzf build/jdk.tar.gz -C /Library/Java/JavaVirtualMachines/
        export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home/
      displayName: 'Setup JDK'
    - task: Gradle@2
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'path'
        jdkDirectory: '/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home/'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'build'
        # checkStyleRunAnalysis: true
        # pmdRunAnalysis: true
